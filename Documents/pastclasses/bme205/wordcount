#!/usr/bin/env python2.7
# wordcount
# Chris Eisenhart 11/10/2014 
# ceisenha@ucsc.edu/ceisenhart@soe.ucsc.edu  Third Version
"""
This program reads any text file from sys.stdin. The count of
every word in the input file is determined.  A word is any
contiguous series of characters from the ascii alphabet and
"'". Each word and the number of times it was seen in the input
file is printed to sys.stdout.  One word and its count is 
is printed per line, separated by a single tab. 
OPTIONS:
Descend - The words are sorted by their counts. Words with 
	the fewest counts are printed first. If there are 
	words with tying counts then they are printed in
	alphabetic order. 
Ascend - The words are sorted by their counts. Words with 
	the most counts are printed first. If there are 
	words with tying counts then they are printed in
	alphabetic order. 
Alpha - The words will be printed in alphabetic order. Use
	with descend option to print the output in reverse
	alphabetic order. 
Input File - The program will read from the input file 
	instead of sys.stdin. 
Output File - The program will print to sys.stdout instead
	sys.stdout. 
"""

from __future__ import print_function  
import  sys, operator, fileinput, collections, string, os.path
import  re, argparse

alphabet="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'"
# The accepted characters in a word. A word is defined as any
# collection of characters from this alphabet. 
def parseArgs(args): 
    """
    INPUT:
	args: The command line information at compile time. 
    OUTPUT: 
	args: A tuple with five elements. 
    Parses the user supplied commands. The result is a tuple
    with five elements, one for each option. The options
    are descend, ascend, alphabet, inputFile and outputFile.  
    """
    parser = argparse.ArgumentParser(description = __doc__)
    MUInput = parser.add_mutually_exclusive_group()
    MUInput.add_argument ("--ascend", "-as",
    help = " The words with the fewest counts will be printed"
		" first",
    action = "store_true" )
    MUInput.add_argument ("--descend", "-d",
    dest = "descend",
    help = " The words with the most counts will be printed"
		" first",
    action = "store_true" ) 
    parser.add_argument ("--alpha", "-al",
    help = " The words will be printed in alphabetical order",
    action = "store_true" )
    parser.add_argument ("--inputFile",
    help = " Specifies that the text should be read in from an"
		" input file",
    action = "store")
    parser.add_argument ("--outputFile",
    help = " Specifies that the word and count pairs should"
		" be printed to an output file",
    action = "store")
    parser.set_defaults (alpha = False)
    parser.set_defaults (descend = False)
    parser.set_defaults (ascend = False)
    options = parser.parse_args()
    return options

def printOutput(outputFile, counts, descend, ascend, alpha):
    """
    INPUT:
	outputFile: A file like object
	counts: A collections.Counter() object
	descend: Boolean
	alpha: Boolean
    OUTPUT:
	None	
    This function sorts counts then prints it to 
    outputFile. The print format for a single line 
    is the key of counts, a tab, and the value of counts.
    """ 
    sortedCounts = sorted(counts.iteritems(),
		 key = operator.itemgetter(0))
    # Default sort the words alphabetically, this ensures that
    # ties will be in alphabetic order for future sorting. 
    # The words are the first column of the hash.  
    if descend:    
        sortedCounts = sorted(sortedCounts,
		 key = operator.itemgetter(1))
	# Sort by the second column of the hash, word counts.
 
    if ascend:
        sortedCounts = sorted(sortedCounts,
		 key = operator.itemgetter(1), reverse = True)
	# Do the same sort as above but reverse it.  
    if alpha and descend:   
        sortedCounts = sorted(sortedCounts,
		 key = operator.itemgetter(0), reverse = True)
	# Sort by word name then reverse it, produces 
	# reverse alphabetical hash table. 
    for key, value in sortedCounts: 
         print(str(key)+"\t"+str(value))

def readWord(inputFile):
    """
    INPUT:
	inputFile: A file like object. 
    OUTPUT:
	word: A string.
    This function yields a single word at a time
    from inputFile. A word is defined as a continuous
    series of characters within alphabet. 
    """
    for line in inputFile:
	word = None
        for char in line:
            if char in alphabet:
	    # These are valid characters
		if word is None: word = char
		# The start of a word
		else: word += char
		# Elongating a word
	    else: 
	    # This is a space or invalid character
		if word is not None: yield word
		word = None 
	if word is not None: yield word

def main(args):
    """
    Reads in the user commands and options, opening
    any files if necessary otherwise reading from sys.stdin. 
    Counts the occurences of words in the input file. 
    The words and their counts are printed. 
    """
    options = parseArgs(args)
    # User options are stored here
    counts = collections.defaultdict(int) 
    # Acts as a hash table to store the word/count pairs
    # counts["word"] will store/return the number of times
    # word occures in the input file. 
    inputFile = sys.stdin
    # Read from sys.stdin as a default.
    if options.inputFile is not None:
        inputFile = open(options.inputFile, 'r')
    for word in readWord(inputFile):
        counts[word] += 1 
    outputFile = sys.stdout
    # Print to sys.stdout as a default. 
    if options.outputFile is not None:
        outputFile = open(options.outputFile, 'w')
    printOutput(outputFile, counts, options.descend, 
		options.ascend, options.alpha) 
    # Print the data in counts to outputFile

if __name__ == "__main__" :
    sys.exit(main(sys.argv))
