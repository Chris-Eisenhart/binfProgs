#!/usr/bin/env python2.7
# palindromes REDO 1
# Chris Eisenhart  ceisenha@ucsc.edu/ceisenhart@soe.ucsc.edu
# 10.31.2014 - 11.29.2014 
"""
The program will identify over and under represented DNA
palindromes in the file(s) provided. 
This program runs on a single, or list, of fasta files. The
files can be in either .fa format or .fa.gz format.  The
program accepts DNA bases A, C, T, and G, other bases will
 be ignored. 

The program will print to standard out.  A header is printed
with basic information; the file names, total character count,
and the number of palindromes considered. Next a list of 
table of data is printed. The columns are kmer, observed count,
expected count, Z-score, and E-value.  The table is sorted by
Z-score values, the lowest coming first. The size of the
 palindrome can be specified using the max_k and min_k options,
 if a specific size is desired set both max_k and min_k = S
 (S = size) otherwise all palindromes between min_k and max_k
 will be considered. Max_k and min_k accept integer values. 
 The cutoff E-value can be modified using the max_e option,
 only palindroems with E-values below the max_e value are
 printed.  The max_e option accepts integers and floats. 
Verbose will print warning if characters not in "ATCG" are
 found.     
 
"""
import sys, operator, fileinput, collections
import string, os.path, re, argparse, palindromeModule
import gzip, math, time
start_time = time.time()
# This keeps track of the time the program started, 
# time.time() signifies the current time. To determine
# total run time start_time is subtracted from time.time()
# then printed. 

def parseArgs(args): 
    """ 
    Sets up the argparse command-line parser and calls it. 
    These options can be accessed using args.option. For
    example args.verbose stores the verbose value (true/false) 
    """
    parser = argparse.ArgumentParser(description = __doc__)
    parser.add_argument ("--max_k",
        type = int,
        help = " Specifies the max size of the palindromes,"
        "the default is 7 ",
        action = "store")
    parser.add_argument ("--min_k",
        type = int,
        help = " Specifies the min size of the palindromes,"
        "the default is 6 ",
        action = "store")
    parser.add_argument ("fileName",
        help = " The file(s) the program should read from, "
        "accepts .fa and .fa.gz files. ",
        nargs = '+',
        action = "store")
    parser.add_argument ("--max_e","-e",
        help = " The cutoff E-value, default is 1.0. ",
        type = float,
        action = "store")
    parser.add_argument("--verbose",
        help = "Print warning messages to stderr.",
        action= "store_false")
    parser.set_defaults(verbose = True)
    parser.set_defaults(max_k = 7)
    parser.set_defaults(min_k = 6)
    parser.set_defaults(max_e = 1.0)
    args = parser.parse_args() 
    return args # Returns the parser as an object


def main(args):
    """
    Identifies over and under represented palindromes based on
    user options. These palindromes are printed to std.out in
    a table format. 
    """
    options = parseArgs(args)
    # Options is keeping the min_k, max_k, max_e and verbose
    # values now. 
    alphabet = "ACTG"
    # This program only accepts ACTG, but other programs may
    # use these functions with different alphabets, so the
    # alphabet variable is passed in. 
    allPalindromesAndHypothesesCount = palindromeModule.get_all_palindromes_and_hypotheses_count(options.min_k,options.max_k)
    # These values are unpacked below. 
    allPalindromes = allPalindromesAndHypothesesCount[0]
    # allPalindromes is now the a collections>Counter holding
    # all palindromes within the range of min_k to max_k
    hypothesesCount = allPalindromesAndHypothesesCount[1]
    # This is the number of palindromes
    resultsAndStats = palindromeModule.get_results_and_stats(
		sys.argv, options.min_k, options.max_k,
		options.verbose, alphabet, allPalindromes,
		hypothesesCount)
    palindromeModule.print_palindromes_and_stats(
		resultsAndStats, options.min_k ,
		 options.max_k, hypothesesCount,
		 options.max_e, time.time()- start_time)
if __name__ == "__main__" :
    sys.exit(main(sys.argv))
