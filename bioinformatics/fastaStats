#!/usr/bin/env python2.7
# fastaStats
# Chris Eisenhart 05/11/2015 
# ceisenha@ucsc.edu/ceisenhart@soe.ucsc.edu 
"""
This program runs on FASTA files and spits out some statistics. The largest contig, 
average contig size, and total bases in the Fasta file will be reported. 
USAGE: 
  python fastaStats.py < inputfile > outputfile 
"""

from __future__ import print_function  
import  sys, operator, fileinput, collections, string, os.path
import  re, fastFunctions, argparse


# functions 
def warning(*objs):
    print("WARNING: ", *objs, file=sys.stderr)
 
def error(*objs):
    """
    Quit the program, if there is an error message spit it to stderr. 
    """
    print("ERROR: ", *objs, file=sys.stderr)
    sys.exit()

def parseArgs(args): 
    """
    Parse the arguments into an opened file for reading (inputFile), and 
    an open file for writing (outputFile). 
    """
    parser = argparse.ArgumentParser(description = __doc__)
    parser.add_argument ("inputFile",
    help = " Specifies that the text should be read in from an"
		" input file. ",
    action = "store")
    parser.add_argument ("--alphabet",
    help = " The user can provide an alphabet to parse the fasta files with, default is DNA "
                " bases (A,T,G,C) and N. ", 
    action = "store")
    parser.add_argument ("--verbose",
    help = " Spit error messages. ",
    action = "store_true")
    parser.set_defaults (strict = False)
    parser.set_defaults (verbose = False)
    parser.set_defaults (tagHash = None)
    parser.set_defaults (alphabet="atgcnATCGN") # Keeping it conservative for now, maybe put it in as an option 
    options = parser.parse_args() # Options is a structure that holds the command line arguments information.
    return options

def main(args):
    """
    """
    options = parseArgs(args)
    inputFile = open (options.inputFile, "r")
    totalBases = 0
    totalSeqs = 0
    longestContig = 0 
    contigs1k = 0
    contigs10k = 0
    contigs50k = 0
    contigs100k = 0
    contigs250k = 0
    contigs1kTotal = 0
    contigs10kTotal = 0
    contigs50kTotal = 0
    contigs100kTotal = 0
    contigs250kTotal = 0
    totalBigSize = 0
    for fasta in fastFunctions.readFasta (inputFile, options.alphabet, False, True):
        totalBases += len(fasta.sequence)
        totalSeqs += 1
        if len(fasta.sequence) > 1000:
            totalBigSize += len(fasta.sequence)
            contigs1k +=1 
            contigs1kTotal += len (fasta.sequence)
        if len(fasta.sequence) > 10000: 
            contigs10k +=1 
            contigs10kTotal += len (fasta.sequence)
        if len(fasta.sequence) > 50000:
            contigs50k +=1 
            contigs50kTotal += len (fasta.sequence)
        if len(fasta.sequence) > 100000: 
            contigs100k +=1 
            contigs100kTotal += len (fasta.sequence)
        if len(fasta.sequence) > 250000:
            contigs250k +=1 
            contigs250kTotal += len (fasta.sequence)
        if len(fasta.sequence) > longestContig:
            longestContig = len(fasta.sequence)
    
    print ("There are %i sequences with an average of %i bases. The longest contig is %i bases"
                " There are %i bases total"% (totalSeqs, totalBases/totalSeqs, longestContig, totalBases))
    print ("There are %i sequences of length 1,000 or greater, the bases in these sequences account for %f of the genome." % (contigs1k, float(float(contigs1kTotal)/float(totalBases) )))
    print ("There are %i sequences of length 3,000 or greater, the bases in these sequences account for %f of the genome." % (contigs10k, float(float(contigs10kTotal)/float(totalBases) )))
    print ("There are %i sequences of length 5,000 or greater, the bases in these sequences account for %f of the genome." % (contigs50k, float(float(contigs50kTotal)/float(totalBases) )))
    print ("There are %i sequences of length 10,000 or greater, the bases in these sequences account for %f of the genome." % (contigs100k, float(float(contigs100kTotal)/float(totalBases) )))
    print ("There are %i sequences of length 20,000 or greater, the bases in these sequences account for %f of the genome." % (contigs250k, float(float(contigs250kTotal)/float(totalBases) )))

    n50Count = 0;
    conservativeN50Count = 0;
    trig1 = True
    trig2 = True
    n50 = 0
    conN50 = 0 
    newInputFile = open (options.inputFile, "r")
    for fasta in fastFunctions.readFasta(newInputFile, options.alphabet, False, True):
        
        if n50Count > (totalBases/2) and trig1:
            n50 = (len(fasta.sequence)) 
            trig1 = False
        if conservativeN50Count > (totalBigSize/2) and trig2:
            conN50 = (len(fasta.sequence)) 
            trig2 = False
        n50Count += len (fasta.sequence)
        if (len(fasta.sequence) > 1000): conservativeN50Count += len(fasta.sequence)
    print ("The unadultered n50 is %i the manipulated n50 is %i" % (n50, conN50))        



if __name__ == "__main__" :
    sys.exit(main(sys.argv))
