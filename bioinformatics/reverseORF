#!/usr/bin/env python2.7
# reverseORF REDO
# Chris Eisenhart  ceisenha@ucsc.edu/ceisenhart@soe.ucsc.edu
# 11.15.2014- 12.16.2014
"""
This program is designed to test four different null models. 
The program looks to prove or disprove the null hypothesis
that an ORF 388 or longer occurres by random chance on the 
opposite strand of a protein encoding gene in THSA_SULSH
that is 560 codons long.  This program is specific to THSA_
SULSH but many functions can be manipulated to other
organisms. 
"""
from __future__ import print_function  
import sys, operator, fileinput, collections
import string, os.path, re, argparse, urllib
import gzip, math, time, reverseORFModule

# functions 
def warning(*objs):
    print("WARNING: ", *objs, file=sys.stderr)

def error(*objs):
    """
    Quit the program, if there is an error message spit it to stderr. 
    """
    print("ERROR: ", *objs, file=sys.stderr)
    sys.exit()

def checkVersion(): 
    """
    Check the python version and squak if there is a problem. 
    """
    if (sys.version.split()[0].replace(".","") < 270):
        error("This system is running python %s, please try again with a version higher than 2.7"
                %(sys.version.split()[0]))
# Check version before arg parsing, the arg parse module requires python 2.7 or higher.
checkVersion()

def parseArgs(args): 
    """ 
    Sets up the argparse command-line parser and calls it. 
    These options can be accessed using args.option. For
    example args.verbose stores the verbose value (true/false) 
    """
    parser = argparse.ArgumentParser(description = __doc__)
    parser.add_argument ("--protein",
        help = " Read the protein sequence for the forward "
        "from the specified file (FASTA format). ",
	type = argparse.FileType('r')) 
    parser.add_argument ("--codon",
        help = " Read the codon bias table from the specified"
        " file. If a codon table is specified, but no protein"
	" is specified, the program will us the random-codon"
	" model.",
	type = argparse.FileType('r'))
    parser.add_argument ("--num_sequences",
	help = " The number of sequences generated, default"
	" is 10,000.",
	type = int,
	action = "store")
    parser.add_argument ("--seq_length",
	help = " The length of the sequences generated, default"
	" is 1680.",
	type = int,
	action = "store")
    parser.add_argument ("--model",
	help = " Which sequence generating model should be used"
	", default is 4.",
	type = int,
	action = "store")
    parser.add_argument ("--codonTable",
	help = " The codon usage table, the default is http://www.kazusa.or.jp/codon/cgi-bin/showcodon.cgi?species=273057&aa=1&style=N"
		" If a user supplied codon table is used it must be in the same format. "
		"",
	action = "store")
    parser.add_argument ("--rOutput",
	help = " Print the output in .csv form, for uploading "
	" into R.",
	action = "store_true")
    parser.set_defaults (codonTable = "http://www.kazusa.or.jp/codon/cgi-bin/showcodon.cgi?species=273057&aa=1&style=N")
    parser.set_defaults(rOutput = False)
    parser.set_defaults(num_sequences = 10000)
    parser.set_defaults(seq_length = 1680)
    parser.set_defaults(model = 4)
    options = parser.parse_args() 
    return options # Returns the parser as an object


def main(args): 
    """
    Calls functions from reverseORFModule. Opens the fasta 
    protein seq or fasta full genome if needed. Calculate
    all ORF's and print them. 
    """
    options = parseArgs(args) 
    codonTables = reverseORFModule.readCodonTable(options.codonTable)
    countTable = codonTables[0]
    aaTable = codonTables[1]
    proteinFile = ("http://www.uniprot.org/uniprot/P46219.fasta")
    openedProteinFile = urllib.urlopen(proteinFile) 
    dnaFile = ("/soe/karplus/.html/bme205/f05/S.solfataricus.fa.gz")
    openedDNAFile = gzip.GzipFile(dnaFile, "r")
    ORFs = reverseORFModule.getORFs(options.num_sequences, options.seq_length, countTable,
		aaTable, options.model, openedDNAFile, openedProteinFile)
    reverseORFModule.printHistogram(ORFs, dnaFile, 
		 options.num_sequences, options.rOutput)

if __name__ == "__main__" :
    sys.exit(main(sys.argv))
