#!/usr/bin/env python2.7
# watchUser
# Chris Eisenhart 08/28/2015 
# ceisenha@ucsc.edu/ceisenhart@soe.ucsc.edu
"""
Lets you 'watch' a user on the machine. Generates statistics for a designated period of time. 
"""

from __future__ import print_function  
import  sys, operator, fileinput, collections, string, os.path
import  re, argparse, subprocess, time

def parseArgs(args): 
    """
    """
    parser = argparse.ArgumentParser(description = __doc__)
    parser.add_argument ("user",
    help = " The users name on the machine. ",
    action = "store")
    parser.add_argument ("--time",
    help = " The total time the program should run. ",
    action = "store")
    parser.add_argument ("--delay",
    help = " The time between each peek. ",
    action = "store")
    parser.add_argument ("--output",
    help = " Store the stats in an ouput file as well as printing them",
    type = argparse.FileType('w'))
    parser.set_defaults(time = "10m") 
    parser.set_defaults(delay = "60s") 
    options = parser.parse_args()
    return options


def getTime(timeString):
    """
    """
    if (timeString.endswith("s")):
        return int(timeString[:-1])
    if (timeString.endswith("m")):
        return 60*int(timeString[:-1])
    if (timeString.endswith("h")):
        return 60*60*int(timeString[:-1])
    if (timeString.endswith("d")):
        return 24*60*60*int(timeString[:-1])
    print ("Unrecognized time value %s, please use 60s for seconds, 60m for minutes, 60h for hours, and 60d for days"%(timeString))

def printHisto(buffer):
    """
    print to a 50 line histogram
    """
    for value in buffer:
        location = 0 
        result = ""
        while (location < 50):
            if (value > location): result += "0"
            else: result += " " 
            location +=1
        print (result)

def main(args):
    """
    """ 
    options = parseArgs(args)
    count = 0
    for tick in range(getTime(options.time)):
        os.system("top -U %s -b -n1 | sed '1,7D' | sed '$D'> .topPeek.txt"%(options.user))
        # 8 is cpu, 9 is mem 
        totalMem = 0
        topCommand = ""
        firstLine = True
        for line in open(".topPeek.txt", "r"):
            splitLine = line.split()
            if firstLine:
                firstLine = False
                topCommand = splitLine[11]
            totalMem += float(splitLine[9])
        location = 0 
        result = ""
        trigger = True
        while (location < 100):
            if (totalMem > location):
                result += "*"
            else:
                if (trigger):
                    trigger = False
                    result = result[:-1]+str(int(totalMem)+1)
                result += "-" 
            location +=1
        count += getTime(options.delay)
        result += "|" + "Top command: " +topCommand +"\tTime: " + str(count) +"s" 
        print (result)
        if (options.output): 
            options.output.write(result + "\n")
        time.sleep(getTime(options.delay))
        if (count == getTime(options.time)):
            break
    os.system("rm .topPeek.txt"); 

if __name__ == "__main__" :
    sys.exit(main(sys.argv))
